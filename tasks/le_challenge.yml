---
- name: "Generate Certificate Signing Request {{ domain.name }}"
  openssl_csr:
    path='{{ le_csr_home }}{{ domain.name }}.csr'
    privatekey_path='{{ le_shared_key }}'
    commonName='{{ domain.name }}'
    subjectAltName="DNS:{{ (domain.alt | join(',DNS:') if domain.alt is defined else domain.name) }}"

- name: "Generate challenge data {{ domain.name }}"
  letsencrypt:
    acme_directory: '{{ le_server }}'
    account_key: '{{ le_account_key }}'
    csr: '{{ le_csr_home }}{{ domain.name }}.csr'
    dest: '{{ le_cert_home }}_{{ domain.name }}.crt'
    remaining_days: "{{ le_remaining_days }}"
  register: challenge

- name: "Copy payload {{ domain.name }}"
  copy:
    dest="{{ le_payload_root }}{{ challenge.challenge_data[item]['http-01']['resource'] }}"
    content="{{ challenge.challenge_data[item]['http-01']['resource_value'] }}"
  with_items: "{{ challenge['challenge_data'] }}"
  when: challenge.changed

- name: "Request cert {{ domain.name }}"
  letsencrypt:
    acme_directory: '{{ le_server }}'
    account_key: '{{ le_account_key }}'
    csr: '{{ le_csr_home }}{{ domain.name }}.csr'
    dest: '{{ le_cert_home }}_{{ domain.name }}.crt'
    data: "{{ challenge }}"
    remaining_days: "{{ le_remaining_days }}"
  when: challenge.changed
  ignore_errors: yes
  notify: reload nginx

- name: "Assemble fullchain {{ domain.name }}"
  assemble:
    src: "{{ le_cert_home }}"
    regexp: "_{{ domain.name }}.crt|le_inter.pem"
    dest: "{{ le_cert_home }}{{ domain.name }}.crt"
  notify: reload nginx
